const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { Pool } = require('pg');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3001;

// PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è Beresta ID (–æ—Ç–¥–µ–ª—å–Ω–∞—è –±–∞–∑–∞)
const pool = new Pool({
  connectionString: process.env.BERESTA_ID_DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Middleware
app.use(cors({
    origin: process.env.CLIENT_URL || "*",
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    credentials: true
}));

app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));

// JWT —Å–µ–∫—Ä–µ—Ç
const JWT_SECRET = process.env.BERESTA_JWT_SECRET || 'beresta_id_secret_key_2024';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü Beresta ID
async function createBerestaTables() {
  const client = await pool.connect();
  
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü Beresta ID...');

    const queries = [
      // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Beresta ID
      `CREATE TABLE IF NOT EXISTS beresta_users (
        id SERIAL PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        name TEXT NOT NULL,
        avatar_url TEXT DEFAULT '',
        is_verified BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_login TIMESTAMP,
        refresh_token TEXT DEFAULT ''
      )`,

      // –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π
      `CREATE TABLE IF NOT EXISTS beresta_sessions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES beresta_users(id) ON DELETE CASCADE,
        token TEXT NOT NULL,
        device_info TEXT DEFAULT '',
        ip_address TEXT DEFAULT '',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP NOT NULL,
        is_active BOOLEAN DEFAULT TRUE
      )`,

      // –ò–Ω–¥–µ–∫—Å—ã
      `CREATE INDEX IF NOT EXISTS idx_beresta_users_email ON beresta_users(email)`,
      `CREATE INDEX IF NOT EXISTS idx_beresta_sessions_token ON beresta_sessions(token)`,
      `CREATE INDEX IF NOT EXISTS idx_beresta_sessions_user ON beresta_sessions(user_id)`
    ];

    for (const query of queries) {
      try {
        await client.query(query);
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ Beresta ID —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞`);
      } catch (tableError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã Beresta ID:', tableError.message);
      }
    }
    
    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã Beresta ID —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü Beresta ID:', error);
  } finally {
    client.release();
  }
}

// Health check
app.get('/health', async (req, res) => {
    try {
        await pool.query('SELECT 1');
        res.json({ 
            success: true, 
            status: 'Beresta ID Server is running',
            timestamp: new Date().toISOString(),
            database: 'PostgreSQL'
        });
    } catch (error) {
        res.status(500).json({ success: false, error: 'Database error' });
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Beresta ID
app.post('/auth/register', async (req, res) => {
    try {
        const { email, password, name } = req.body;

        if (!email || !password || !name) {
            return res.status(400).json({ 
                success: false, 
                error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º email
        if (!email.includes('@')) {
            return res.status(400).json({ 
                success: false, 
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
        if (password.length < 6) {
            return res.status(400).json({ 
                success: false, 
                error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤' 
            });
        }

        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const existingUser = await client.query(
                "SELECT id FROM beresta_users WHERE email = $1", 
                [email.toLowerCase()]
            );

            if (existingUser.rows.length > 0) {
                return res.status(409).json({ 
                    success: false, 
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
                });
            }

            // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            const saltRounds = 10;
            const hashedPassword = await bcrypt.hash(password, saltRounds);

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await client.query(
                `INSERT INTO beresta_users (email, password, name) 
                 VALUES ($1, $2, $3) RETURNING id, email, name, created_at`,
                [email.toLowerCase(), hashedPassword, name]
            );

            const user = userResult.rows[0];

            // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = jwt.sign(
                { 
                    userId: user.id, 
                    email: user.email,
                    type: 'beresta_id'
                },
                JWT_SECRET,
                { expiresIn: '30d' }
            );

            // –°–æ–∑–¥–∞–µ–º refresh token
            const refreshToken = jwt.sign(
                { 
                    userId: user.id,
                    type: 'refresh'
                },
                JWT_SECRET,
                { expiresIn: '90d' }
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            await client.query(
                `INSERT INTO beresta_sessions (user_id, token, expires_at) 
                 VALUES ($1, $2, CURRENT_TIMESTAMP + INTERVAL '30 days')`,
                [user.id, refreshToken]
            );

            await client.query('COMMIT');

            res.json({
                success: true,
                message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
                token: token,
                refreshToken: refreshToken,
                user: {
                    id: user.id,
                    email: user.email,
                    name: user.name,
                    createdAt: user.created_at
                }
            });

        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Beresta ID:', error);
        res.status(500).json({ success: false, error: 'Internal server error' });
    }
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Beresta ID
app.post('/auth/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({ 
                success: false, 
                error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        const client = await pool.connect();
        
        try {
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await client.query(
                `SELECT id, email, password, name, avatar_url FROM beresta_users 
                 WHERE email = $1`,
                [email.toLowerCase()]
            );

            if (userResult.rows.length === 0) {
                return res.status(401).json({ 
                    success: false, 
                    error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
                });
            }

            const user = userResult.rows[0];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            const isPasswordValid = await bcrypt.compare(password, user.password);
            if (!isPasswordValid) {
                return res.status(401).json({ 
                    success: false, 
                    error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            await client.query(
                "UPDATE beresta_users SET last_login = CURRENT_TIMESTAMP WHERE id = $1",
                [user.id]
            );

            // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = jwt.sign(
                { 
                    userId: user.id, 
                    email: user.email,
                    type: 'beresta_id'
                },
                JWT_SECRET,
                { expiresIn: '30d' }
            );

            // –°–æ–∑–¥–∞–µ–º refresh token
            const refreshToken = jwt.sign(
                { 
                    userId: user.id,
                    type: 'refresh'
                },
                JWT_SECRET,
                { expiresIn: '90d' }
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            await client.query(
                `INSERT INTO beresta_sessions (user_id, token, expires_at) 
                 VALUES ($1, $2, CURRENT_TIMESTAMP + INTERVAL '30 days')`,
                [user.id, refreshToken]
            );

            res.json({
                success: true,
                message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
                token: token,
                refreshToken: refreshToken,
                user: {
                    id: user.id,
                    email: user.email,
                    name: user.name,
                    avatarUrl: user.avatar_url
                }
            });

        } catch (error) {
            throw error;
        } finally {
            client.release();
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ Beresta ID:', error);
        res.status(500).json({ success: false, error: 'Internal server error' });
    }
});

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Beresta ID
app.post('/auth/logout', async (req, res) => {
    try {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

        if (!token) {
            return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        try {
            const decoded = jwt.verify(token, JWT_SECRET);
            
            // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await pool.query(
                "DELETE FROM beresta_sessions WHERE user_id = $1",
                [decoded.userId]
            );

            res.json({
                success: true,
                message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω'
            });

        } catch (jwtError) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ Beresta ID:', error);
        res.status(500).json({ success: false, error: 'Internal server error' });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Beresta ID
app.get('/auth/verify', async (req, res) => {
    try {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

        if (!token) {
            return res.status(401).json({ valid: false, error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        try {
            const decoded = jwt.verify(token, JWT_SECRET);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const userResult = await pool.query(
                "SELECT id, email, name FROM beresta_users WHERE id = $1",
                [decoded.userId]
            );

            if (userResult.rows.length === 0) {
                return res.json({ valid: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            res.json({
                valid: true,
                user: {
                    id: userResult.rows[0].id,
                    email: userResult.rows[0].email,
                    name: userResult.rows[0].name
                }
            });

        } catch (jwtError) {
            res.json({ valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ valid: false, error: 'Internal server error' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
app.post('/auth/refresh', async (req, res) => {
    try {
        const { refreshToken } = req.body;

        if (!refreshToken) {
            return res.status(400).json({ success: false, error: 'Refresh token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        try {
            const decoded = jwt.verify(refreshToken, JWT_SECRET);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            const sessionResult = await pool.query(
                `SELECT s.id, u.id as user_id, u.email, u.name 
                 FROM beresta_sessions s 
                 JOIN beresta_users u ON s.user_id = u.id 
                 WHERE s.token = $1 AND s.is_active = TRUE AND s.expires_at > NOW()`,
                [refreshToken]
            );

            if (sessionResult.rows.length === 0) {
                return res.status(401).json({ success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token' });
            }

            const user = sessionResult.rows[0];

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π access token
            const newToken = jwt.sign(
                { 
                    userId: user.user_id, 
                    email: user.email,
                    type: 'beresta_id'
                },
                JWT_SECRET,
                { expiresIn: '30d' }
            );

            res.json({
                success: true,
                token: newToken,
                user: {
                    id: user.user_id,
                    email: user.email,
                    name: user.name
                }
            });

        } catch (jwtError) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π refresh token' });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ success: false, error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Beresta ID
app.get('/api/profile', async (req, res) => {
    try {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1];

        if (!token) {
            return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        try {
            const decoded = jwt.verify(token, JWT_SECRET);
            
            const userResult = await pool.query(
                `SELECT id, email, name, avatar_url, created_at, last_login 
                 FROM beresta_users WHERE id = $1`,
                [decoded.userId]
            );

            if (userResult.rows.length === 0) {
                return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            const user = userResult.rows[0];

            res.json({
                success: true,
                profile: {
                    id: user.id,
                    email: user.email,
                    name: user.name,
                    avatarUrl: user.avatar_url,
                    createdAt: user.created_at,
                    lastLogin: user.last_login
                }
            });

        } catch (jwtError) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ success: false, error: 'Internal server error' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Beresta ID
app.put('/api/profile', async (req, res) => {
    try {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1];
        const { name, avatarUrl } = req.body;

        if (!token) {
            return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        try {
            const decoded = jwt.verify(token, JWT_SECRET);
            
            let query = "UPDATE beresta_users SET ";
            let params = [];
            let setParts = [];

            if (name !== undefined) {
                setParts.push("name = $" + (params.length + 1));
                params.push(name);
            }

            if (avatarUrl !== undefined) {
                setParts.push("avatar_url = $" + (params.length + 1));
                params.push(avatarUrl);
            }

            if (setParts.length === 0) {
                return res.status(400).json({ success: false, error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
            }

            query += setParts.join(", ") + " WHERE id = $" + (params.length + 1);
            params.push(decoded.userId);

            await pool.query(query, params);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            const userResult = await pool.query(
                `SELECT id, email, name, avatar_url, created_at, last_login 
                 FROM beresta_users WHERE id = $1`,
                [decoded.userId]
            );

            res.json({
                success: true,
                message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
                profile: {
                    id: userResult.rows[0].id,
                    email: userResult.rows[0].email,
                    name: userResult.rows[0].name,
                    avatarUrl: userResult.rows[0].avatar_url,
                    createdAt: userResult.rows[0].created_at,
                    lastLogin: userResult.rows[0].last_login
                }
            });

        } catch (jwtError) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ success: false, error: 'Internal server error' });
    }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è Beresta ID
app.post('/auth/change-password', async (req, res) => {
    try {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1];
        const { currentPassword, newPassword } = req.body;

        if (!token) {
            return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        if (!currentPassword || !newPassword) {
            return res.status(400).json({ success: false, error: '–¢–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        if (newPassword.length < 6) {
            return res.status(400).json({ success: false, error: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤' });
        }

        try {
            const decoded = jwt.verify(token, JWT_SECRET);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            const userResult = await pool.query(
                "SELECT password FROM beresta_users WHERE id = $1",
                [decoded.userId]
            );

            if (userResult.rows.length === 0) {
                return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            const currentHashedPassword = userResult.rows[0].password;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            const isCurrentPasswordValid = await bcrypt.compare(currentPassword, currentHashedPassword);
            if (!isCurrentPasswordValid) {
                return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });
            }

            // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            const saltRounds = 10;
            const newHashedPassword = await bcrypt.hash(newPassword, saltRounds);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
            await pool.query(
                "UPDATE beresta_users SET password = $1 WHERE id = $2",
                [newHashedPassword, decoded.userId]
            );

            res.json({
                success: true,
                message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
            });

        } catch (jwtError) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
        res.status(500).json({ success: false, error: 'Internal server error' });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Beresta ID
app.listen(PORT, '0.0.0.0', async () => {
    console.log(`üöÄ Beresta ID Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê URL: http://0.0.0.0:${PORT}`);
    console.log(`üîß –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await createBerestaTables();
    
    console.log('‚úÖ Beresta ID Server –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
});
