const express = require('express');
const cors = require('cors');
const nodemailer = require('nodemailer');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(bodyParser.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(process.env.DB_PATH || './beresta.db');

db.serialize(() => {
    db.run("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, email TEXT UNIQUE, first_name TEXT, last_name TEXT)");
    db.run("CREATE TABLE IF NOT EXISTS friends (id INTEGER PRIMARY KEY AUTOINCREMENT, user_email TEXT, friend_email TEXT)");
    db.run("CREATE TABLE IF NOT EXISTS messages (id INTEGER PRIMARY KEY AUTOINCREMENT, sender_email TEXT, receiver_email TEXT, message TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)");
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'pushkatank2@gmail.com', // –≤–∞—à–∞ –ø–æ—á—Ç–∞
        pass: '123456789Orlov'     // –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', (req, res) => {
    const { email, firstName, lastName } = req.body;
    
    db.run("INSERT INTO users (email, first_name, last_name) VALUES (?, ?, ?)", 
        [email, firstName, lastName], 
        function(err) {
            if (err) {
                res.json({ success: false, error: err.message });
            } else {
                res.json({ success: true, id: this.lastID });
            }
        }
    );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/users', (req, res) => {
    db.all("SELECT email, first_name, last_name FROM users", [], (err, rows) => {
        if (err) {
            res.json({ success: false, error: err.message });
        } else {
            res.json({ success: true, users: rows });
        }
    });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞
app.post('/add-friend', (req, res) => {
    const { userEmail, friendEmail } = req.body;
    
    db.run("INSERT INTO friends (user_email, friend_email) VALUES (?, ?)", 
        [userEmail, friendEmail], 
        function(err) {
            if (err) {
                res.json({ success: false, error: err.message });
            } else {
                res.json({ success: true });
            }
        }
    );
});

// –£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞
app.post('/remove-friend', (req, res) => {
    const { userEmail, friendEmail } = req.body;
    
    db.run("DELETE FROM friends WHERE user_email = ? AND friend_email = ?", 
        [userEmail, friendEmail], 
        function(err) {
            if (err) {
                res.json({ success: false, error: err.message });
            } else {
                res.json({ success: true });
            }
        }
    );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
app.get('/friends/:email', (req, res) => {
    const userEmail = req.params.email;
    
    db.all("SELECT f.friend_email, u.first_name, u.last_name FROM friends f JOIN users u ON f.friend_email = u.email WHERE f.user_email = ?", 
        [userEmail], 
        (err, rows) => {
            if (err) {
                res.json({ success: false, error: err.message });
            } else {
                res.json({ success: true, friends: rows });
            }
        }
    );
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/send-message', async (req, res) => {
    const { senderEmail, receiverEmail, message } = req.body;
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        db.run("INSERT INTO messages (sender_email, receiver_email, message) VALUES (?, ?, ?)", 
            [senderEmail, receiverEmail, message], function(err) {
                if (err) {
                    return res.json({ success: false, error: err.message });
                }
            });
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ email
        try {
            const mailOptions = {
                from: 'pushkatank2@gmail.com', // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π email
                to: receiverEmail,
                subject: `üíå –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–µ—Ä–µ—Å—Ç–µ –æ—Ç ${senderEmail}`,
                html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: #2c3e50;">–ë–µ—Ä–µ—Å—Ç–∞ - –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</h2>
                        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #3498db;">
                            <p style="margin: 0; color: #2c3e50; font-size: 16px;">
                                <strong>–û—Ç:</strong> ${senderEmail}<br>
                                <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${message}
                            </p>
                        </div>
                        <p style="color: #7f8c8d; font-size: 14px; margin-top: 20px;">
                            –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –ë–µ—Ä–µ—Å—Ç–∞.
                        </p>
                    </div>
                `
            };
            
            await transporter.sendMail(mailOptions);
            console.log("Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        } catch (emailError) {
            console.log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", emailError.message);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }
        
        res.json({ success: true }); // ‚úÖ –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —Ç.–∫. —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        
    } catch (error) {
        console.log("–û–±—â–∞—è –æ—à–∏–±–∫–∞:", error.message);
        res.json({ success: false, error: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/messages/:userEmail/:friendEmail', (req, res) => {
    const { userEmail, friendEmail } = req.params;
    
    db.all("SELECT * FROM messages WHERE (sender_email = ? AND receiver_email = ?) OR (sender_email = ? AND receiver_email = ?) ORDER BY timestamp", 
        [userEmail, friendEmail, friendEmail, userEmail], 
        (err, rows) => {
            if (err) {
                res.json({ success: false, error: err.message });
            } else {
                res.json({ success: true, messages: rows });
            }
        }
    );
});

// –í–∞–∂–Ω–æ: —Å–ª—É—à–∞—Ç—å –Ω–∞ 0.0.0.0
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Server running on port ${PORT}`);
    console.log(`üåê Available at: http://0.0.0.0:${PORT}`);
});
