const express = require('express');
const cors = require('cors');
const nodemailer = require('nodemailer');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');
const multer = require('multer');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
    origin: '*',
    methods: ['GET', 'POST', 'DELETE', 'PUT'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static('public'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = 'uploads';
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, uniqueSuffix + '-' + file.originalname);
    }
});

const upload = multer({
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024 // 10MB limit
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('image/') || file.mimetype.startsWith('video/')) {
            cb(null, true);
        } else {
            cb(new Error('Only images and videos are allowed'), false);
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbPath = process.env.DB_PATH || './beresta.db';
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        console.log('–ü—É—Ç—å –∫ –ë–î:', dbPath);
    }
});

// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
db.run("PRAGMA foreign_keys = ON");

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS friends (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_email TEXT NOT NULL,
        friend_email TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_email, friend_email),
        FOREIGN KEY (user_email) REFERENCES users (email) ON DELETE CASCADE,
        FOREIGN KEY (friend_email) REFERENCES users (email) ON DELETE CASCADE
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        sender_email TEXT NOT NULL,
        receiver_email TEXT NOT NULL,
        message TEXT NOT NULL,
        attachment_type TEXT DEFAULT '',
        attachment_filename TEXT DEFAULT '',
        attachment_original_name TEXT DEFAULT '',
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (sender_email) REFERENCES users (email) ON DELETE CASCADE,
        FOREIGN KEY (receiver_email) REFERENCES users (email) ON DELETE CASCADE
    )`);

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    db.run("CREATE INDEX IF NOT EXISTS idx_friends_user ON friends(user_email)");
    db.run("CREATE INDEX IF NOT EXISTS idx_friends_friend ON friends(friend_email)");
    db.run("CREATE INDEX IF NOT EXISTS idx_messages_sender ON messages(sender_email)");
    db.run("CREATE INDEX IF NOT EXISTS idx_messages_receiver ON messages(receiver_email)");
    db.run("CREATE INDEX IF NOT EXISTS idx_messages_conversation ON messages(sender_email, receiver_email)");
    db.run("CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages(timestamp)");
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
let transporter;
try {
    transporter = nodemailer.createTransporter({
        service: 'gmail',
        auth: {
            user: process.env.EMAIL_USER || 'pushkatank2@gmail.com',
            pass: process.env.EMAIL_PASS || '123456789Orlov'
        }
    });
    console.log('üìß Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
} catch (error) {
    console.log('‚ö†Ô∏è Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', error.message);
    transporter = null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ë–î
function handleDatabaseError(err, res) {
    console.error('–û—à–∏–±–∫–∞ –ë–î:', err.message);
    res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function autoAddToChats(senderEmail, receiverEmail) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    db.get("SELECT email FROM users WHERE email = ?", [receiverEmail], (err, receiver) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', err.message);
            return;
        }

        if (!receiver) {
            console.log('–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É)
        db.get(
            `SELECT 1 FROM messages 
             WHERE (sender_email = ? AND receiver_email = ?) 
                OR (sender_email = ? AND receiver_email = ?) 
             LIMIT 1`,
            [senderEmail, receiverEmail, receiverEmail, senderEmail],
            (err, existingChat) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞:', err.message);
                    return;
                }

                // –ï—Å–ª–∏ —á–∞—Ç–∞ –µ—â–µ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–æ—é–¥–Ω—É—é —Å–≤—è–∑—å
                if (!existingChat) {
                    console.log(`–°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç –º–µ–∂–¥—É ${senderEmail} –∏ ${receiverEmail}`);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —á–∞—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    db.run(
                        "INSERT OR IGNORE INTO friends (user_email, friend_email) VALUES (?, ?)",
                        [receiverEmail, senderEmail],
                        function(err) {
                            if (err) {
                                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è (–ø–æ–ª—É—á–∞—Ç–µ–ª—å):', err.message);
                            } else if (this.changes > 0) {
                                console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç –¥–ª—è ${receiverEmail} —Å ${senderEmail}`);
                            }
                        }
                    );

                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —á–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    db.run(
                        "INSERT OR IGNORE INTO friends (user_email, friend_email) VALUES (?, ?)",
                        [senderEmail, receiverEmail],
                        function(err) {
                            if (err) {
                                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å):', err.message);
                            } else if (this.changes > 0) {
                                console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç –¥–ª—è ${senderEmail} —Å ${receiverEmail}`);
                            }
                        }
                    );
                }
            }
        );
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
app.get('/health', (req, res) => {
    db.get("SELECT 1 as test", [], (err) => {
        if (err) {
            res.status(500).json({ 
                success: false, 
                status: 'Database connection failed',
                error: err.message 
            });
        } else {
            res.json({ 
                success: true, 
                status: 'Server is running',
                timestamp: new Date().toISOString(),
                database: 'Connected',
                email: transporter ? 'Configured' : 'Disabled'
            });
        }
    });
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', (req, res) => {
    const { email, firstName, lastName } = req.body;
    
    if (!email || !firstName || !lastName) {
        return res.status(400).json({ 
            success: false, 
            error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
        });
    }

    if (!email.includes('@')) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' 
        });
    }

    db.run(
        "INSERT INTO users (email, first_name, last_name) VALUES (?, ?, ?)", 
        [email.toLowerCase(), firstName.trim(), lastName.trim()], 
        function(err) {
            if (err) {
                if (err.message.includes('UNIQUE constraint failed')) {
                    res.status(409).json({ 
                        success: false, 
                        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
                    });
                } else {
                    handleDatabaseError(err, res);
                }
            } else {
                res.json({ 
                    success: true, 
                    id: this.lastID,
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' 
                });
            }
        }
    );
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
app.delete('/delete-account/:email', (req, res) => {
    const email = req.params.email.toLowerCase();
    
    if (!email) {
        return res.status(400).json({ 
            success: false, 
            error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    db.get("SELECT email FROM users WHERE email = ?", [email], (err, user) => {
        if (err) {
            return handleDatabaseError(err, res);
        }

        if (!user) {
            return res.status(404).json({ 
                success: false, 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è FOREIGN KEY)
        db.run("DELETE FROM users WHERE email = ?", [email], function(err) {
            if (err) {
                handleDatabaseError(err, res);
            } else if (this.changes === 0) {
                res.status(404).json({ 
                    success: false, 
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
                });
            } else {
                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –≤–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db.all(
                    "SELECT attachment_filename FROM messages WHERE sender_email = ? AND attachment_filename != ''",
                    [email],
                    (err, attachments) => {
                        if (err) {
                            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π:', err.message);
                        } else {
                            attachments.forEach(attachment => {
                                const filePath = path.join('uploads', attachment.attachment_filename);
                                if (fs.existsSync(filePath)) {
                                    fs.unlinkSync(filePath);
                                }
                            });
                        }
                    }
                );

                res.json({ 
                    success: true, 
                    message: '–ê–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã' 
                });
            }
        });
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/users', (req, res) => {
    db.all("SELECT email, first_name, last_name FROM users ORDER BY first_name, last_name", [], (err, rows) => {
        if (err) {
            handleDatabaseError(err, res);
        } else {
            res.json({ 
                success: true, 
                users: rows,
                count: rows.length 
            });
        }
    });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞
app.post('/add-friend', (req, res) => {
    const { userEmail, friendEmail } = req.body;
    
    if (!userEmail || !friendEmail) {
        return res.status(400).json({ 
            success: false, 
            error: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥—Ä—É–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
    }

    if (userEmail.toLowerCase() === friendEmail.toLowerCase()) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è' 
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    db.get("SELECT email FROM users WHERE email = ?", [friendEmail.toLowerCase()], (err, row) => {
        if (err) {
            return handleDatabaseError(err, res);
        }

        if (!row) {
            return res.status(404).json({ 
                success: false, 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∞
        db.run(
            "INSERT INTO friends (user_email, friend_email) VALUES (?, ?)", 
            [userEmail.toLowerCase(), friendEmail.toLowerCase()], 
            function(err) {
                if (err) {
                    if (err.message.includes('UNIQUE constraint failed')) {
                        res.status(409).json({ 
                            success: false, 
                            error: '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Ö' 
                        });
                    } else {
                        handleDatabaseError(err, res);
                    }
                } else {
                    res.json({ 
                        success: true, 
                        message: '–î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω' 
                    });
                }
            }
        );
    });
});

// –£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞
app.post('/remove-friend', (req, res) => {
    const { userEmail, friendEmail } = req.body;
    
    if (!userEmail || !friendEmail) {
        return res.status(400).json({ 
            success: false, 
            error: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥—Ä—É–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
    }

    db.run(
        "DELETE FROM friends WHERE user_email = ? AND friend_email = ?", 
        [userEmail.toLowerCase(), friendEmail.toLowerCase()], 
        function(err) {
            if (err) {
                handleDatabaseError(err, res);
            } else if (this.changes === 0) {
                res.status(404).json({ 
                    success: false, 
                    error: '–î—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
                });
            } else {
                res.json({ 
                    success: true, 
                    message: '–î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' 
                });
            }
        }
    );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/friends/:email', (req, res) => {
    const userEmail = req.params.email.toLowerCase();
    
    db.all(
        `SELECT f.friend_email, u.first_name, u.last_name 
         FROM friends f 
         JOIN users u ON f.friend_email = u.email 
         WHERE f.user_email = ? 
         ORDER BY u.first_name, u.last_name`, 
        [userEmail], 
        (err, rows) => {
            if (err) {
                handleDatabaseError(err, res);
            } else {
                res.json({ 
                    success: true, 
                    friends: rows,
                    count: rows.length 
                });
            }
        }
    );
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/send-message', (req, res) => {
    const { senderEmail, receiverEmail, message } = req.body;
    
    if (!senderEmail || !receiverEmail || !message) {
        return res.status(400).json({ 
            success: false, 
            error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
        });
    }

    const trimmedMessage = message.trim();
    if (trimmedMessage.length === 0) {
        return res.status(400).json({ 
            success: false, 
            error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
        });
    }

    if (trimmedMessage.length > 1000) {
        return res.status(400).json({ 
            success: false, 
            error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)' 
        });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    db.run(
        "INSERT INTO messages (sender_email, receiver_email, message) VALUES (?, ?, ?)", 
        [senderEmail.toLowerCase(), receiverEmail.toLowerCase(), trimmedMessage], 
        function(err) {
            if (err) {
                return handleDatabaseError(err, res);
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞
            autoAddToChats(senderEmail.toLowerCase(), receiverEmail.toLowerCase());

            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)
            if (transporter) {
                try {
                    const mailOptions = {
                        from: process.env.EMAIL_USER || 'pushkatank2@gmail.com',
                        to: receiverEmail,
                        subject: `üíå –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–µ—Ä–µ—Å—Ç–µ –æ—Ç ${senderEmail}`,
                        html: `
                            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                                <h2 style="color: #2c3e50;">–ë–µ—Ä–µ—Å—Ç–∞ - –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</h2>
                                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #3498db;">
                                    <p style="margin: 0; color: #2c3e50; font-size: 16px;">
                                        <strong>–û—Ç:</strong> ${senderEmail}<br>
                                        <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${trimmedMessage}
                                    </p>
                                </div>
                                <p style="color: #7f8c8d; font-size: 14px; margin-top: 20px;">
                                    –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –ë–µ—Ä–µ—Å—Ç–∞.
                                </p>
                            </div>
                        `
                    };
                    
                    transporter.sendMail(mailOptions, (emailError, info) => {
                        if (emailError) {
                            console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', emailError.message);
                        } else {
                            console.log('Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.messageId);
                        }
                    });
                } catch (emailError) {
                    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ email:', emailError.message);
                }
            }

            res.json({ 
                success: true, 
                message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                messageId: this.lastID,
                timestamp: new Date().toISOString()
            });
        }
    );
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º
app.post('/send-message-attachment', upload.single('attachment'), (req, res) => {
    const { senderEmail, receiverEmail, message } = req.body;
    
    if (!senderEmail || !receiverEmail) {
        return res.status(400).json({ 
            success: false, 
            error: 'Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
    }

    if (!req.file) {
        return res.status(400).json({ 
            success: false, 
            error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' 
        });
    }

    const trimmedMessage = message ? message.trim() : '';
    const attachmentType = req.file.mimetype.startsWith('image/') ? 'image' : 'video';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –≤ –ë–î
    db.run(
        "INSERT INTO messages (sender_email, receiver_email, message, attachment_type, attachment_filename, attachment_original_name) VALUES (?, ?, ?, ?, ?, ?)", 
        [
            senderEmail.toLowerCase(), 
            receiverEmail.toLowerCase(), 
            trimmedMessage,
            attachmentType,
            req.file.filename,
            req.file.originalname
        ], 
        function(err) {
            if (err) {
                // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                fs.unlinkSync(req.file.path);
                return handleDatabaseError(err, res);
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞
            autoAddToChats(senderEmail.toLowerCase(), receiverEmail.toLowerCase());

            res.json({ 
                success: true, 
                message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                messageId: this.lastID,
                timestamp: new Date().toISOString(),
                attachment: {
                    filename: req.file.filename,
                    originalName: req.file.originalname,
                    type: attachmentType,
                    url: `/uploads/${req.file.filename}`
                }
            });
        }
    );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–ª–æ–∂–µ–Ω–∏—è
app.get('/uploads/:filename', (req, res) => {
    const filename = req.params.filename;
    const filePath = path.join('uploads', filename);
    
    if (fs.existsSync(filePath)) {
        res.sendFile(path.resolve(filePath));
    } else {
        res.status(404).json({ 
            success: false, 
            error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/messages/:userEmail/:friendEmail', (req, res) => {
    const userEmail = req.params.userEmail.toLowerCase();
    const friendEmail = req.params.friendEmail.toLowerCase();
    
    db.all(
        `SELECT sender_email, receiver_email, message, 
                attachment_type, attachment_filename, attachment_original_name,
                datetime(timestamp, 'localtime') as timestamp 
         FROM messages 
         WHERE (sender_email = ? AND receiver_email = ?) 
            OR (sender_email = ? AND receiver_email = ?) 
         ORDER BY timestamp ASC`, 
        [userEmail, friendEmail, friendEmail, userEmail], 
        (err, rows) => {
            if (err) {
                handleDatabaseError(err, res);
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π
                const messagesWithAttachments = rows.map(row => {
                    if (row.attachment_filename) {
                        row.attachment_url = `/uploads/${row.attachment_filename}`;
                    }
                    return row;
                });
                
                res.json({ 
                    success: true, 
                    messages: messagesWithAttachments,
                    count: messagesWithAttachments.length 
                });
            }
        }
    );
});

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
app.post('/clear-chat', (req, res) => {
    const { userEmail, friendEmail } = req.body;
    
    if (!userEmail || !friendEmail) {
        return res.status(400).json({ 
            success: false, 
            error: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥—Ä—É–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    db.all(
        `SELECT attachment_filename FROM messages 
         WHERE ((sender_email = ? AND receiver_email = ?) 
            OR (sender_email = ? AND receiver_email = ?))
         AND attachment_filename != ''`,
        [userEmail.toLowerCase(), friendEmail.toLowerCase(), 
         friendEmail.toLowerCase(), userEmail.toLowerCase()],
        (err, attachments) => {
            if (err) {
                return handleDatabaseError(err, res);
            }

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –≤–ª–æ–∂–µ–Ω–∏–π
            attachments.forEach(attachment => {
                const filePath = path.join('uploads', attachment.attachment_filename);
                if (fs.existsSync(filePath)) {
                    fs.unlinkSync(filePath);
                }
            });

            // –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î
            db.run(
                `DELETE FROM messages 
                 WHERE (sender_email = ? AND receiver_email = ?) 
                    OR (sender_email = ? AND receiver_email = ?)`, 
                [userEmail.toLowerCase(), friendEmail.toLowerCase(), 
                 friendEmail.toLowerCase(), userEmail.toLowerCase()], 
                function(err) {
                    if (err) {
                        handleDatabaseError(err, res);
                    } else {
                        res.json({ 
                            success: true, 
                            message: '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞',
                            deletedCount: this.changes
                        });
                    }
                }
            );
        }
    );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/user/:email', (req, res) => {
    const email = req.params.email.toLowerCase();
    
    db.get(
        "SELECT email, first_name, last_name FROM users WHERE email = ?", 
        [email], 
        (err, row) => {
            if (err) {
                handleDatabaseError(err, res);
            } else if (!row) {
                res.status(404).json({ 
                    success: false, 
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
                });
            } else {
                res.json({ 
                    success: true, 
                    user: row 
                });
            }
        }
    );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥—Ä—É–∑—å—è + –ª—é–¥–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
app.get('/chats/:email', (req, res) => {
    const userEmail = req.params.email.toLowerCase();
    
    db.all(
        `-- –î—Ä—É–∑—å—è
        SELECT f.friend_email as contact_email, u.first_name, u.last_name, 
               'friend' as type, MAX(m.timestamp) as last_message_time
        FROM friends f 
        JOIN users u ON f.friend_email = u.email 
        LEFT JOIN messages m ON (m.sender_email = ? AND m.receiver_email = f.friend_email) 
                             OR (m.sender_email = f.friend_email AND m.receiver_email = ?)
        WHERE f.user_email = ? 
        GROUP BY f.friend_email
        
        UNION
        
        -- –õ—é–¥–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ—Ç –≤ –¥—Ä—É–∑—å—è—Ö
        SELECT 
            CASE 
                WHEN sender_email = ? THEN receiver_email 
                ELSE sender_email 
            END as contact_email,
            u.first_name,
            u.last_name,
            'chat' as type,
            MAX(m.timestamp) as last_message_time
        FROM messages m
        JOIN users u ON u.email = CASE 
                WHEN m.sender_email = ? THEN m.receiver_email 
                ELSE m.sender_email 
            END
        WHERE (sender_email = ? OR receiver_email = ?)
          AND NOT EXISTS (
              SELECT 1 FROM friends f 
              WHERE f.user_email = ? 
              AND f.friend_email = CASE 
                  WHEN m.sender_email = ? THEN m.receiver_email 
                  ELSE m.sender_email 
              END
          )
        GROUP BY contact_email
        
        ORDER BY last_message_time DESC NULLS LAST, first_name, last_name`,
        [userEmail, userEmail, userEmail, userEmail, userEmail, userEmail, userEmail, userEmail, userEmail],
        (err, rows) => {
            if (err) {
                handleDatabaseError(err, res);
            } else {
                res.json({ 
                    success: true, 
                    chats: rows,
                    count: rows.length 
                });
            }
        }
    );
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/stats', (req, res) => {
    db.all(
        `SELECT 
            (SELECT COUNT(*) FROM users) as users_count,
            (SELECT COUNT(*) FROM friends) as friendships_count,
            (SELECT COUNT(*) FROM messages) as messages_count,
            (SELECT COUNT(*) FROM messages WHERE date(timestamp) = date('now')) as messages_today,
            (SELECT COUNT(*) FROM messages WHERE attachment_type != '') as attachments_count`,
        [],
        (err, rows) => {
            if (err) {
                handleDatabaseError(err, res);
            } else {
                res.json({ 
                    success: true, 
                    stats: rows[0] 
                });
            }
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö routes
app.use('*', (req, res) => {
    res.status(404).json({ 
        success: false, 
        error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        availableEndpoints: [
            'POST /register',
            'DELETE /delete-account/:email',
            'GET /users',
            'POST /add-friend',
            'POST /remove-friend',
            'GET /friends/:email',
            'GET /chats/:email',
            'POST /send-message',
            'POST /send-message-attachment',
            'GET /messages/:userEmail/:friendEmail',
            'POST /clear-chat',
            'GET /user/:email',
            'GET /stats',
            'GET /health',
            'GET /uploads/:filename'
        ]
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    res.status(500).json({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ë–µ—Ä–µ—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìç Health check: http://localhost:${PORT}/health`);
    console.log(`üìß –†–µ–∂–∏–º email: ${transporter ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}`);
    console.log(`üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
    console.log(`üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: uploads/`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    db.close((err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err.message);
        } else {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
        }
        process.exit(0);
    });
});

process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM...');
    db.close((err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err.message);
        } else {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
        }
        process.exit(0);
    });
});
